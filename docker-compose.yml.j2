services:
  # generate configs using the anyconf utility
  generateconfig-anyconf:
    build:
      context: .
      dockerfile: Dockerfile-generateconfig-anyconf
    volumes:
      - ./:/code
      - "${STORAGE_DIR}:/code/storage"

  # processing any-sync-* configs
  generateconfig-processing:
    depends_on:
      generateconfig-anyconf:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile: Dockerfile-generateconfig-processing
    volumes:
      - ./:/code
      - "${STORAGE_DIR}:/code/storage"

  mongo-1:
    depends_on:
      generateconfig-processing:
        condition: service_completed_successfully
    image: "mongo:${MONGO_VERSION}"
    command: ["--replSet", "${MONGO_REPLICA_SET}", "--port", "${MONGO_1_PORT}"]
    ports:
      - "${MONGO_1_PORT}:${MONGO_1_PORT}"
    volumes:
      - "${STORAGE_DIR}/mongo-1/:/data/db"
    healthcheck:
      test: test $$(mongosh --port ${MONGO_1_PORT} --quiet --eval "try {rs.initiate({_id:'${MONGO_REPLICA_SET}',members:[{_id:0,host:\"mongo-1:${MONGO_1_PORT}\"}]})} catch(e) {rs.status().ok}") -eq 1
      interval: 10s
      start_period: 30s

  redis:
    depends_on:
      generateconfig-processing:
        condition: service_completed_successfully
    image: "redis/redis-stack-server:${REDIS_VERSION}"
    restart: always
    command: ["redis-server", "--port", "${REDIS_PORT}", "--dir", "/data/", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "noeviction", "--protected-mode", "no", "--loadmodule", "/opt/redis-stack/lib/redisbloom.so"]
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - "${STORAGE_DIR}/redis/:/data/"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "-p", "${REDIS_PORT}", "incr", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 3

  minio:
    image: "minio/minio:${MINIO_VERSION}"
    restart: always
    command: ["server", "/data", "--console-address", ":${MINIO_WEB_PORT}", "--address", ":${MINIO_PORT}"]
    environment:
      MINIO_ROOT_USER: "${AWS_ACCESS_KEY_ID}"
      MINIO_ROOT_PASSWORD: "${AWS_SECRET_ACCESS_KEY}"
      MC_HOST_minio: http://${AWS_ACCESS_KEY_ID}:${AWS_SECRET_ACCESS_KEY}@minio:${MINIO_PORT}
    ports:
      - "${EXTERNAL_MINIO_PORT}:${MINIO_PORT}"
      - "${EXTERNAL_MINIO_WEB_PORT}:${MINIO_WEB_PORT}"
    volumes:
      - "${STORAGE_DIR}/minio:/data"
    healthcheck:
      test: bash -c 'mc version info "minio/${MINIO_BUCKET}" || mc mb "minio/${MINIO_BUCKET}"'
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      default:
        aliases:
          - "${MINIO_BUCKET}.minio" # <bucket-name>.<endpoint-name>

  any-sync-coordinator_bootstrap:
    image: "ghcr.io/anyproto/any-sync-coordinator:${ANY_SYNC_COORDINATOR_VERSION}"
    depends_on:
      generateconfig-processing:
        condition: service_completed_successfully
      mongo-1:
        condition: service_healthy
    volumes:
      - ./etc/any-sync-coordinator/:/etc/any-sync-coordinator/
    restart: "no"
    command: ["/bin/any-sync-confapply", "-c", "/etc/any-sync-coordinator/config.yml", "-n", "/etc/any-sync-coordinator/network.yml", "-e"]

  any-sync-coordinator:
    image: "ghcr.io/anyproto/any-sync-coordinator:${ANY_SYNC_COORDINATOR_VERSION}"
    depends_on:
      generateconfig-processing:
        condition: service_completed_successfully
      mongo-1:
        condition: service_healthy
      any-sync-coordinator_bootstrap:
        condition: service_completed_successfully
    ports:
      - "${ANY_SYNC_COORDINATOR_PORT}:${ANY_SYNC_COORDINATOR_PORT}"
      - "${ANY_SYNC_COORDINATOR_QUIC_PORT}:${ANY_SYNC_COORDINATOR_QUIC_PORT}/udp"
      - 8005:8000
    volumes:
      - ./etc/any-sync-coordinator/:/etc/any-sync-coordinator/
      - "${STORAGE_DIR}/networkStore/any-sync-coordinator/:/networkStore/"
    deploy:
      resources:
        limits:
          memory: 500M
    restart: on-failure

  any-sync-filenode:
    image: "ghcr.io/anyproto/any-sync-filenode:${ANY_SYNC_FILENODE_VERSION}"
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      any-sync-coordinator:
        condition: service_started
    ports:
      - "${ANY_SYNC_FILENODE_PORT}:${ANY_SYNC_FILENODE_PORT}"
      - "${ANY_SYNC_FILENODE_QUIC_PORT}:${ANY_SYNC_FILENODE_QUIC_PORT}/udp"
      - 8004:8000
    volumes:
      - ./etc/any-sync-filenode/:/etc/any-sync-filenode/
      - ./etc/.aws:/root/.aws:ro
      - "${STORAGE_DIR}/networkStore/any-sync-filenode/:/networkStore/"
    deploy:
      resources:
        limits:
          memory: 500M
    restart: on-failure

{% for node in nodes %}
  any-sync-node-{{ node }}:
    image: "ghcr.io/anyproto/any-sync-node:${ANY_SYNC_NODE_VERSION}"
    depends_on:
      any-sync-coordinator:
        condition: service_started
    ports:
      - "${ANY_SYNC_NODE_{{ node }}_PORT}:${ANY_SYNC_NODE_{{ node }}_PORT}"
      - "${ANY_SYNC_NODE_{{ node }}_QUIC_PORT}:${ANY_SYNC_NODE_{{ node }}_QUIC_PORT}/udp"
      - 81{{ '%02d' % node | int }}:8080
      - 82{{ '%02d' % node | int }}:8000
    volumes:
      - ./etc/any-sync-node-{{ node }}/:/etc/any-sync-node/
      - "${STORAGE_DIR}/any-sync-node-{{ node }}/:/storage/"
      - "${STORAGE_DIR}/networkStore/any-sync-node-{{ node }}/:/networkStore/"
    deploy:
      resources:
        limits:
          memory: 500M
    restart: on-failure
{% endfor %}

  any-sync-consensusnode:
    image: "ghcr.io/anyproto/any-sync-consensusnode:${ANY_SYNC_CONSENSUSNODE_VERSION}"
    depends_on:
      any-sync-coordinator:
        condition: service_started
    ports:
      - "${ANY_SYNC_CONSENSUSNODE_PORT}:${ANY_SYNC_CONSENSUSNODE_PORT}"
      - "${ANY_SYNC_CONSENSUSNODE_QUIC_PORT}:${ANY_SYNC_CONSENSUSNODE_QUIC_PORT}/udp"
      - 8006:8000
    volumes:
      - ./etc/any-sync-consensusnode/:/etc/any-sync-consensusnode/
      - "${STORAGE_DIR}/networkStore/any-sync-consensusnode/:/networkStore/"
    deploy:
      resources:
        limits:
          memory: 500M
    restart: on-failure

  # any-sync-netcheck
  netcheck:
    image: "ghcr.io/anyproto/any-sync-tools:${ANY_SYNC_TOOLS_VERSION}"
    depends_on:
      - any-sync-consensusnode
      - any-sync-filenode
      - any-sync-coordinator{% for node in nodes %}
      - any-sync-node-{{ node }}{% endfor %}
    volumes:
      - ./:/code
      - "${STORAGE_DIR}:/code/storage"
    command: ["tail", "-f", "/dev/null"]
    stop_signal: SIGKILL
    tty: true
    healthcheck:
      test: any-sync-netcheck -c /code/storage/docker-generateconfig/nodes.yml 2>&1| grep -P 'netcheck\s+success'
      interval: 60s
      start_period: 5s
